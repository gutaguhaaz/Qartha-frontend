📋 Resumen para el Asistente de Frontend - Qartha API
🎯 LO QUE YA ESTÁ LISTO
✅ Backend Completamente Funcional
URL Base: https://tu-repl.replit.dev (puerto 5000)
API REST con FastAPI corriendo y documentada
Base de datos: MongoDB (requiere configuración de Atlas)
CORS configurado para desarrollo local y producción
Autenticación Bearer Token implementada
✅ Endpoints Disponibles
🔐 Autenticación
POST /api/auth/register  // Registrar usuario
POST /api/auth/login     // Login (devuelve token)
📱 Dispositivos (CRUD Completo)
GET /api/devices              // Listar con filtros
POST /api/devices             // Crear dispositivo
GET /api/devices/{id}         // Obtener por ID
PUT /api/devices/{id}         // Actualizar
POST /api/devices/{id}/qr     // Generar QR (goQR API)
📍 Tracking/Escaneos
POST /api/scans              // Registrar escaneo con geolocalización
GET /api/scans?device_id=... // Historial de escaneos
📁 Archivos
POST /api/files     // Subir archivos (10MB max)
GET /api/files/{id} // Descargar archivos
✅ QR Integration (goQR API)
Sin claves API requeridas - funciona inmediatamente
Genera QR codes 300x300 PNG
Respuesta incluye qr_image_url lista para mostrar
🚀 LO QUE DEBE HACER EL FRONTEND
1. Configuración Inicial
// URL base del backend
const API_BASE = 'https://tu-repl.replit.dev';
// Headers con autenticación
const getAuthHeaders = () => {
  const token = localStorage.getItem('qartha_token');
  return {
    'Content-Type': 'application/json',
    'Authorization': token ? `Bearer ${token}` : ''
  };
};
2. Flujo de Autenticación
// 1. Login
const login = async (username, password) => {
  const response = await fetch(`${API_BASE}/api/auth/login`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ username, password })
  });
  
  const data = await response.json();
  if (data.access_token) {
    localStorage.setItem('qartha_token', data.access_token);
  }
  return data;
};
3. Gestión de Dispositivos
// Listar dispositivos
const getDevices = async (filters = {}) => {
  const params = new URLSearchParams({
    skip: filters.skip || 0,
    limit: filters.limit || 50,
    ...(filters.category && { category: filters.category })
  });
  
  const response = await fetch(`${API_BASE}/api/devices?${params}`, {
    headers: getAuthHeaders()
  });
  return await response.json();
};
// Crear dispositivo
const createDevice = async (deviceData) => {
  const response = await fetch(`${API_BASE}/api/devices`, {
    method: 'POST',
    headers: getAuthHeaders(),
    body: JSON.stringify(deviceData)
  });
  return await response.json();
};
// Generar QR
const generateQR = async (deviceId) => {
  const response = await fetch(`${API_BASE}/api/devices/${deviceId}/qr`, {
    method: 'POST',
    headers: getAuthHeaders()
  });
  return await response.json(); // Incluye qr_image_url
};
4. Mostrar QR Codes
// El backend devuelve qr_image_url listo para usar
const displayQR = (device) => {
  const img = document.createElement('img');
  img.src = device.qr_image_url; // URL directa de goQR
  img.alt = `QR Code for ${device.name}`;
  img.style.maxWidth = '300px';
  document.getElementById('qr-container').appendChild(img);
};
5. Upload de Archivos
const uploadFile = async (file, deviceId = null) => {
  const formData = new FormData();
  formData.append('file', file);
  if (deviceId) formData.append('device_id', deviceId);
  
  const token = localStorage.getItem('qartha_token');
  const response = await fetch(`${API_BASE}/api/files`, {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${token}` },
    body: formData
  });
  return await response.json();
};
🎯 ESTRUCTURA DE DATOS
Device Object
interface Device {
  id: string;
  name: string;
  category?: string;
  brand?: string;
  model?: string;
  serial?: string;
  mac?: string;
  site?: string;
  room?: string;
  rack?: string;
  lat?: number;
  lng?: number;
  notes?: string;
  description?: string;
  specifications?: Record<string, any>;
  maintenance_notes?: string;
  tags?: string[];
  qr_url?: string;           // URL del collector
  qr_image_url?: string;     // PNG del QR (300x300)
  files?: string[];
  created_at: string;
  updated_at: string;
}
🔧 PRÓXIMOS PASOS INMEDIATOS
1. Configurar MongoDB (Solo si quieres persistencia)
Ir a Secrets en Replit
Agregar MONGO_URL_ATLAS con tu URI de MongoDB Atlas
Agregar DATABASE_NAME (ej: qartha)
2. Verificar Conexión
// Test del backend
fetch('https://tu-repl.replit.dev/health')
  .then(r => r.json())
  .then(data => console.log(data)); // {status: "ok"}
3. Empezar con Frontend
Sin autenticación: Puedes probar directamente los endpoints de devices
Con autenticación: Crear usuario y hacer login primero
🎉 TODO FUNCIONA YA
✅ API Lista
✅ QR Codes sin configuración
✅ CORS configurado
✅ Documentación completa
✅ Estructura de datos definida

El frontend puede empezar a conectarse inmediatamente usando los ejemplos de código de arriba. 🚀